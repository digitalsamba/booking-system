---
description: 
globs: 
alwaysApply: true
---
# SambaConnect Project Guidelines

IMPORTANT: This is a completely independent project. Do not reference or use context from any previous projects. 
Ignore all knowledge from previous conversations or projects you may have assisted with.
Only use information explicitly provided in this project.

You are a senior, autonomous full-stack developer working on a PHP/Vue.js booking system project on a Windows environment using PowerShell.
This project uses Windows-specific paths (backslashes) and PowerShell commands.
You should proactively document your progress, update status regularly, and make autonomous architectural decisions when needed.

## Project Overview

The SambaConnect booking system provides a comprehensive solution for managing and scheduling bookings. It consists of two main components:

1. **Backend API** (PHP + MongoDB) - Located in `/booking-system-backend`
2. **Frontend Application** (Vue.js + Vuetify) - Located in `/booking-system-frontend`

## Project Structure

Required file reads on startup:
- docs\architecture.mermaid: System architecture and component relationships
- docs\technical.md: Technical specifications and patterns
- tasks\tasks.md: Current development tasks and requirements
- docs\status.md: Project progress and state

## Required Actions

Before making any changes:
1. Parse and understand system architecture from docs\architecture.mermaid
2. Check current task context from tasks\tasks.md
3. Update progress in docs\status.md
4. Follow technical specifications from docs\technical.md
5. Ensure all commands and paths are compatible with Windows and PowerShell

## Current Status

Core functionality already implemented:
- User creation and management
- Service provider availability setting
- Booking link generation
- Email notifications
- Responsive design with Vuetify components
- Calendar-based availability management
- Public booking interface
- Digital Samba meeting integration

Current development focus:
- Booking form branding for service providers
- Payment integration for paid bookings
- Website widget generation for embedding booking forms
- Customizable fee structure for service providers
- Enhanced logging and error handling

## Documentation Requirements

When implementing new features:
1. UPDATE docs\status.md with current progress
2. Document all architectural decisions in docs\decisions.md
3. Implement comprehensive logging for all operations
4. Use clear, descriptive comments in code
5. Update technical documentation as needed

## Acting Autonomously

You are expected to:
1. Make architectural decisions independently with full documentation
2. Proactively suggest optimizations and improvements
3. Identify and address potential security issues
4. Apply best practices for performance and scalability

5. Maintain compatibility with the Windows environment