---
description: 
globs: 
alwaysApply: false
---
# Vue.js Development Guidelines for SambaConnect

## Project Structure

Frontend Structure:
1. All Vue.js code must reside in the frontend\src\ directory
2. Follow Vue.js best practices:
   - frontend\src\components\: Vue components
   - frontend\src\stores\: Pinia stores
   - frontend\src\views\: Page views
   - frontend\src\assets\: Static assets
   - frontend\src\composables\: Shared composition functions
   - frontend\src\services\: API services
   - frontend\src\router\: Vue Router configuration

## Vue.js 3 and Composition API

1. Use Vue.js 3 with Composition API for all new components
2. Prefer `<script setup>` syntax for simpler components
3. Use `defineProps()`, `defineEmits()`, and other Composition API macros
4. Follow Vue.js style guide (Priority A and B rules)
5. Maintain consistency with existing component patterns
6. Use computed properties for derived state
7. Use watchers sparingly and only when necessary

## Pinia State Management

1. Use Pinia for global state management
2. Define clear store modules with appropriate actions and getters
3. Use composition functions (`useStore()`) to access stores
4. Avoid direct state mutation outside of actions
5. Keep store modules focused on specific domains
6. Implement proper error handling in async actions
7. Use devtools for debugging state issues

## Vuetify Components and Styling

1. Use Vuetify components for consistent UI
2. Follow Vuetify component guidelines and best practices
3. Use Vuetify's grid system for responsive layouts
4. Apply consistent spacing using Vuetify's spacing utilities
5. Use theme variables for colors to maintain consistency
6. Avoid custom CSS where Vuetify utilities can be used
7. Use Vuetify's elevation and rounded classes for depth

## Form Handling and Validation

1. Implement comprehensive form validation
2. Use Vuetify's form components and validation
3. Provide clear error messages for validation failures
4. Implement consistent loading states for form submission
5. Use computed properties for form validation
6. Validate forms before submission
7. Implement proper error handling for form submission

## API Integration

1. Use axios for API requests
2. Centralize API calls in services
3. Implement proper error handling for API requests
4. Use loading states for async operations
5. Add request/response interceptors for common handling
6. Implement token-based authentication
7. Handle API errors consistently across the application

## Performance Considerations

1. Avoid expensive computations in component rendering
2. Use lazy loading for routes and components
3. Implement proper caching strategies for API responses
4. Optimize reactive dependencies in computed properties
5. Use v-once for static content
6. Avoid deep watchers when possible
7. Use provide/inject for deeply nested components

## Windows Environment Specifics

1. Use path utilities for file path handling
2. Consider case-insensitivity for imports
3. Use cross-platform path handling with path.join()

4. Be mindful of line ending differences