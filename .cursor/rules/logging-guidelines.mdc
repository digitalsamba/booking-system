---
description: 
globs: 
alwaysApply: false
---
# Logging Guidelines for SambaConnect

## Logging Philosophy

1. Logging should provide visibility into system behavior
2. Logs should be structured and machine-parseable
3. Log levels should be used appropriately
4. Context information should be included in all log entries
5. Logs should facilitate troubleshooting and monitoring
6. Sensitive information should never be logged
7. Logging should have minimal performance impact

## Log Levels

1. ERROR: Critical failures that prevent functionality
2. WARN: Issues that don't stop execution but indicate problems
3. INFO: Normal application flow and significant events
4. DEBUG: Detailed development information for troubleshooting
5. TRACE: Very detailed information for intensive debugging

## Backend Logging Implementation

1. Create a dedicated Logger service in backend\src\Logger\
2. Implement structured logging with JSON format
3. Include timestamp, level, message, and context in all logs
4. Log all API request/response data (excluding sensitive info)
5. Implement logging for all database operations
6. Log authentication and authorization events
7. Use correlation IDs to track request flows

## Frontend Logging

1. Implement client-side error logging
2. Log user interaction events where appropriate
3. Send critical errors to the backend for storage
4. Avoid logging sensitive user information
5. Implement debug logging that can be enabled/disabled
6. Consider performance impact of client-side logging
7. Use appropriate log levels for client-side logging

## Log Storage and Management

1. Configure appropriate log file rotation
2. Consider centralized log storage for production
3. Implement log retention policies
4. Ensure logs are stored securely
5. Consider log aggregation tools for analysis
6. Implement log backup procedures
7. Configure appropriate permissions for log files

## What to Log

1. Application startup and shutdown
2. Authentication events (login/logout/failures)
3. Authorization failures
4. Database operations (excluding sensitive data)
5. API requests and responses
6. Error conditions and exceptions
7. Performance metrics for critical operations
8. Security-related events

## Context Information

1. Include user ID (if authenticated) in all relevant logs
2. Add request ID or correlation ID to track request flow
3. Include IP address for security-related logs
4. Add timestamp with timezone
5. Include service/component name
6. Add relevant business context (booking ID, etc.)
7. Include environment information where relevant

## Error Logging

1. Log full exception details including stack traces
2. Include cause and context information
3. Categorize errors for easier analysis
4. Don't expose sensitive details in error messages
5. Log all validation failures
6. Implement proper error boundaries in frontend
7. Ensure errors are properly formatted for logging

## Windows-Specific Logging

1. Configure proper log file paths for Windows
2. Consider Windows Event Log integration
3. Handle line ending differences in log files
4. Configure proper logging directory permissions
5. Consider performance impact on Windows filesystem
6. Handle file locking issues for log files

7. Implement proper log rotation on Windows