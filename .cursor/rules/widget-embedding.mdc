---
description: 
globs: 
alwaysApply: false
---
# Widget Embedding Guidelines for SambaConnect

## Technical Considerations

1. Design for cross-origin embedding with proper CORS configuration
2. Create lightweight, performant widget code
3. Use iframe embedding for maximum compatibility 
4. Consider script-based alternatives for advanced integrations
5. Implement proper postMessage communication for cross-origin interactions
6. Handle browser compatibility issues
7. Support legacy browser fallbacks where necessary

## Architecture

1. Create a dedicated WidgetService for widget generation
2. Implement secure authentication for widget API calls
3. Generate unique widget IDs for tracking and analytics
4. Create isolated widget bundles for loading
5. Implement proper versioning for widget code
6. Design clean APIs for widget configuration
7. Consider widget lifecycle management

## Backend Implementation

1. Create endpoints for widget configuration and validation
2. Implement proper authentication for widget requests
3. Generate embed codes with secure parameters
4. Track widget usage and performance metrics
5. Handle cross-origin requests properly
6. Implement rate limiting for widget endpoints
7. Create proper documentation for the widget API

## Frontend Implementation

1. Create a dedicated widget bundle separate from main app
2. Implement responsive design for all screen sizes
3. Support theming and customization options
4. Use minimal dependencies for smaller bundle size
5. Implement lazy loading for widget components
6. Create fallback UI for loading and error states
7. Ensure accessibility compliance for embedded widgets

## User Interface

1. Make widget styling customizable to match host websites
2. Provide simple copy-paste installation instructions
3. Create widget configuration UI in the main application
4. Implement preview functionality for widget customization
5. Allow service providers to customize widget appearance
6. Support both light and dark themes
7. Implement responsive breakpoints for different screen sizes

## Security Considerations

1. Implement proper authentication for widget API calls
2. Use token-based validation for widget origins
3. Sanitize all input from host websites
4. Prevent clickjacking and other common embedding attacks
5. Consider Content Security Policy implications
6. Implement CSRF protection for widget submissions
7. Validate origin for sensitive operations

## Performance Optimization

1. Minimize widget bundle size for fast loading
2. Implement lazy loading where appropriate
3. Use CDN for static widget assets
4. Avoid blocking host page rendering
5. Implement proper caching strategies
6. Optimize CSS and JavaScript for minimal footprint
7. Use efficient loading strategies for widget resources

## CMS Integration

1. Support various CMS platforms (WordPress, Wix, Squarespace)
2. Provide platform-specific installation instructions
3. Consider developing plugins for popular platforms
4. Test widget in various CMS environments
5. Provide troubleshooting guides for common issues
6. Support different embedding methods as needed

7. Document platform-specific limitations and workarounds