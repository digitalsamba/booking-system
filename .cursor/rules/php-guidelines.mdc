---
description: 
globs: 
alwaysApply: false
---
# PHP Development Guidelines for SambaConnect

## Code Structure and Organization

Backend Structure:
1. All PHP application code must reside in the backend\src\ directory
2. Follow Laravel/Symfony-like structure:
   - backend\src\Controllers\
   - backend\src\Services\
   - backend\src\Models\
   - backend\src\Repositories\
   - backend\src\Logger\ for logging services
3. MongoDB schemas and migrations in backend\database\schemas\
4. Comprehensive logging implementation in backend\src\Logger\

## Coding Standards

1. Use PHP 8.x features and strict typing where possible
2. Follow PSR-12 coding standards
3. Document with PHPDoc
4. Implement proper error handling and validation
5. Use Composer for dependency management
6. Implement comprehensive logging for debugging and monitoring
7. Follow MongoDB best practices for PHP interactions

## MongoDB Integration

1. Use MongoDB PHP library for database operations
2. Follow MongoDB schema design best practices
3. Implement proper MongoDB connection pooling
4. Utilize MongoDB aggregation framework where appropriate
5. Log all significant database operations
6. Implement proper error handling for MongoDB operations
7. Consider performance implications of queries on large collections

## Error Handling and Validation

1. Implement proper input validation for all user-submitted data
2. Handle exceptions with appropriate error messages and logging
3. Return consistent error responses from API endpoints
4. Validate data before database operations
5. Log all validation failures with context information
6. Use MongoDB schema validation where applicable
7. Implement proper sanitization for all user inputs

## Logging

1. Use structured logging with severity levels (ERROR, WARN, INFO, DEBUG)
2. Include contextual information in all log entries
3. Log all significant operations and errors
4. Implement request/response logging for API endpoints
5. Configure proper log rotation and management
6. Use transaction IDs to track request flows
7. Store logs in a way that facilitates easy querying and analysis

## Security Considerations

1. Validate all user input to prevent injection attacks
2. Use proper authentication and authorization checks
3. Implement CSRF protection for API endpoints
4. Follow security best practices for MongoDB
5. Handle sensitive data with proper encryption
6. Implement API rate limiting to prevent abuse
7. Follow principle of least privilege for database operations

## Windows Environment Specifics

1. Use proper path handling with backslashes
2. Consider case-insensitivity of Windows filesystem
3. Use appropriate functions for file operations
4. Handle line endings properly (CRLF vs LF)

5. Configure environment-specific settings properly